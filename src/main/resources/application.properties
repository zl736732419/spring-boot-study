########主机设置
hostname=zl52

########################### devtools相关设置
# 重新加载时取消日志记录
spring.devtools.restart.log-condition-evaluation-delta=false
# 忽略指定目录内容修改导致系统重启,默认情况下
# /META-INF/maven, /META-INF/resources, /resources, /static, /public, /templates
# 内容修改不会导致系统重新加载
#spring.devtools.restart.exclude=static/**,public/**
# 配置classpath之外的目录内容修改，系统需要重新加载
spring.devtools.restart.additional-paths=outclasspath

# 禁用重新加载设置为false
spring.devtools.restart.enabled=true
# 只有trigger file修改才会导致重新加载,修改其他文件不会引起重新加载,该配置文件对应的默认路径是classpath
#spring.devtools.restart.trigger-file=restart-trigger.txt
# 开启当spring boot重新加载后浏览器自动更新,这里需要浏览器安装livereload插件
spring.devtools.livereload.enabled=true
# 开启远程客户端，连接到远程的spring boot服务，主要是为了通过远程服务客户端将本地修改推到远程服务做更新
# 1. 远程spring boot服务需要设置spring-boot-maven-plugin启用devtools
# <configuration>
#   <excludeDevtools>false</excludeDevtools>
# </configuration>
# 2. 需要设置远程服务连接认证密码spring.devtools.remote.secret
# 客户端在连接到远程服务时会采用当前配置的密码进行认证
spring.devtools.remote.secret=123456

######################### 定制文本banner
# 1. 直接在classpath添加banner.txt
# 2. 通过spring.banner.location指定banner路径
#spring.banner.location=classpath:banners/banner.txt
#spring.banner.location=file:C:\\Users\\Administrator\\Desktop\\banner.txt
# 通过/和classpath:前缀是等效的，都是从classpath目录中查找
#spring.banner.location=/banners/banner-with-color.txt
#spring.banner.charset=UTF-8

######################### 定制图片banner
# 图片最后会转化成ASCII的形式展现
# 1. 直接在classpath下添加banner.[gif,jpg,png]三种图片之一
# 2. 通过spring.banner.image.location设置路径
#spring.banner.image.location=file:C:\\Users\\Administrator\\Desktop\\20180227141621.jpg

######################### 日志
# 指定日志文件名称(当前目录),或者全路径
#logging.file=C:\\Users\\Administrator\\Desktop\\springboot.log
# 指定日志文件生成目录，名称为spring.log,logging.file和logging.path不能同时作用
#logging.path=C:\\Users\\Administrator\\Desktop

#设置日志打印级别
# logging.level.org.springframework.web=DEBUG

#修改日志文件大小和归档文件大小
# 默认日志文件大小10MB
#logging.file.max-size=10MB
# 设置归档保存的日志文件大小
#logging.file.max-history=50MB

# 可以添加日志文件做一些定制修改
# Logback logback-spring.xml, logback.xml
# Log4j2  log4j2-spring.xml, log4j2.xml
# JDK (Java Util Logging)  logging.properties
# 官方文档推荐使用-spring形式的日志文件，并且Java Util Logging在可执行jar运行时还存在一些问题，不建议在可执行jar包中使用logging.properties


#######################web application config

# 静态资源请求通过ResourceHttpRequestHandler进行处理
# 默认/** 
#spring.mvc.static-path-pattern=/static/**
# 指定静态资源的存放目录
# 默认在classpath: /static, /public, /resources, /META-INF/resources
#spring.resources.static-locations=

# 开启静态资源缓存破坏
spring.resources.chain.strategy.content.enabled=true
spring.resources.chain.strategy.content.paths=/**

#spring.resources.chain.strategy.fixed.enabled=true
#spring.resources.chain.strategy.fixed.paths=/js/
#spring.resources.chain.strategy.fixed.version=v12

# 禁用favicon
spring.mvc.favicon.enabled=false


########################################################  
###THYMELEAF (ThymeleafAutoConfiguration)  
########################################################  
spring.thymeleaf.prefix=classpath:/templates/thymeleaf/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.content-type=text/html
# set to false for hot refresh  
spring.thymeleaf.cache=false

########################################################  
###FREEMARKER (FreeMarkerAutoConfiguration)  
########################################################  
#spring.freemarker.allow-request-override=false
#spring.freemarker.allow-session-override=false
#spring.freemarker.cache=true
#spring.freemarker.check-template-location=true
#spring.freemarker.content-type=text/html
#spring.freemarker.enabled=true
#spring.freemarker.expose-request-attributes=false
#spring.freemarker.expose-session-attributes=false
#spring.freemarker.expose-spring-macro-helpers=true
#spring.freemarker.prefer-file-system-access=true
#spring.freemarker.suffix=.ftl
#spring.freemarker.template-loader-path=classpath:/templates/freemarker/
#spring.freemarker.settings.template_update_delay=0
#spring.freemarker.settings.default_encoding=UTF-8
#spring.freemarker.settings.classic_compatible=true
#spring.freemarker.order=1


########################################################  
###Servlet Container
########################################################  
# 服务器端口，默认8080
server.port=8080
# 监听地址
server.address=0.0.0.0
# session是否持久化
server.servlet.session.persistence=true
server.servlet.session.store-dir=/session-dir
# session超时时间，单位秒
server.servlet.session.timeout=120


########################################################  
###DB
########################################################  
spring.datasource.driverClassName = com.mysql.jdbc.Driver
spring.datasource.url = jdbc:mysql://${hostname}:3306/test1?useUnicode=true&characterEncoding=utf-8
spring.datasource.username = root
spring.datasource.password = root

# springboot启动时执行的初始化脚本需要借助spring-boot-starter-jdbc
spring.datasource.schema=classpath:db/init.sql
spring.datasource.data=classpath:db/data.sql
spring.datasource.initialize=true
spring.datasource.continueOnError=false

########################################################  
###Mybatis
########################################################  
mybatis.type-aliases-package=com.zheng.springboot.mybatis
mybatis.config-locations=classpath:mybatis/mybatis-config.xml
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=30


### mybatis custom config
mybatis.default.page=1
mybatis.default.limit=10


########################################################  
###Redis
########################################################
# 单机配置 
spring.redis.standalone.hostname = ${hostname}
# 连接redis的密码
spring.redis.standalone.password =
# 连接redis的端口号
spring.redis.standalone.port = 6379
# 当前采用的redis数据库
spring.redis.standalone.database = 0

#集群配置
# （普通集群，不使用则不用开启）在群集中执行命令时要遵循的最大重定向数目。
spring.redis.cluster.max-redirects=3
# （普通集群，不使用则不用开启）以逗号分隔的“主机：端口”对列表进行引导。
spring.redis.cluster.nodes=192.168.1.52:7000,192.168.1.52:7001,192.168.1.52:7002,192.168.1.52:7003,192.168.1.52:7004,192.168.1.52:7005
spring.redis.cluster.password=
# 集群连接超时时间(单位毫秒)
spring.redis.cluster.timeout=120000

#redis连接池配置
# 连接分配在池被耗尽时抛出异常之前应该阻塞的最长时间量（以毫秒为单位）。使用负值可以无限期地阻止。
spring.redis.pool.maxWait=-1
# 目标为保持在池中的最小空闲连接数。这个设置只有在正面的情况下才有效果。
spring.redis.pool.minIdle=0
# 最大空闲连接数, 默认8个
spring.redis.pool.maxIdle = 20
# 最大连接数, 默认8个
spring.redis.pool.maxTotal = 500
# 每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3
spring.redis.pool.numTestsPerEvictionRun = 3
# 在获取连接的时候检查有效性, 默认false
spring.redis.pool.testOnBorrow = true
# 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true
spring.redis.pool.blockWhenExhausted = false
# 在回收连接的时候检查有效性, 默认false
spring.redis.pool.testOnReturn = false

########################################################  
###cache
########################################################
#spring.cache.type=jcache

###ehcache3.x cache
#spring.cache.jcache.provider=org.ehcache.jsr107.EhcacheCachingProvider
#spring.cache.jcache.config=classpath:cache/ehcache3x.xml

###redis cache
# 单位秒
spring.cache.redis.ttl=600
spring.cache.redis.cache-null-values=true
spring.cache.redis.use-prefix=true


########################################################  
###message
########################################################
#######rabbitmq
spring.rabbitmq.host=${hostname}
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
# 支持发布确认
spring.rabbitmq.publisher-confirms=true
# 支持发布返回
spring.rabbitmq.publisher-returns=true
# 采用手动应答
spring.rabbitmq.listener.simple.acknowledge-mode=manual
# 当前监听容器数
spring.rabbitmq.listener.simple.concurrency=1
# 最大数
spring.rabbitmq.listener.simple.max-concurrency=1
# 是否支持重试
spring.rabbitmq.listener.simple.retry.enabled=true


#######activemq
spring.activemq.broker-url=tcp://${hostname}:61616
#spring.activemq.broker-url=failover:(tcp://localhost:61616,tcp://localhost:61617)
spring.activemq.user=admin
spring.activemq.password=admin
spring.activemq.pool.enabled=true
spring.activemq.pool.max-connections=50


com.zheng.test.queue=m2m_queue
com.zheng.test.topic=m2m_topic

